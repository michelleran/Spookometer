using System;
using System.Collections.Generic;

namespace UnityEngine.XR.iOS
{
	public class UnityARHitTestExample : MonoBehaviour
	{
		// hit test = searching for real-world objects and anchor points (in camera input)

		public Transform m_HitTransform; // linked to the transform of the kitten
		public float maxRayDistance = 30.0f; // maximum distance you can move the kitten
		public LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer

        bool HitTestWithResultType (ARPoint point, ARHitTestResultType resultTypes)
        {
            List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, resultTypes); // see if any valid places nearby to put kitten
            if (hitResults.Count > 0) { // if there's a valid place to put the kitten
                foreach (var hitResult in hitResults) {
                    Debug.Log ("Got hit!");
					// move the kitten to the first valid position where the user dragged to
                    m_HitTransform.position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);
					// adjust rotation as necessary
                    m_HitTransform.rotation = UnityARMatrixOps.GetRotation (hitResult.worldTransform);
                    //Debug.Log (string.Format ("x:{0:0.######} y:{1:0.######} z:{2:0.######}", m_HitTransform.position.x, m_HitTransform.position.y, m_HitTransform.position.z));
                    return true;
                }
            }
            return false;
        }
		
		// Update is called once per frame
		void Update () {
			/*#if UNITY_EDITOR   //we will only use this script on the editor side, though there is nothing that would prevent it from working on device
			if (Input.GetMouseButtonDown (0)) {
				Ray ray = Camera.main.ScreenPointToRay (Input.mousePosition);
				RaycastHit hit;
				
				//we'll try to hit one of the plane collider gameobjects that were generated by the plugin
				//effectively similar to calling HitTest with ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent
				if (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) {
					//we're going to get the position from the contact point
					m_HitTransform.position = hit.point;
					Debug.Log (string.Format ("x:{0:0.######} y:{1:0.######} z:{2:0.######}", m_HitTransform.position.x, m_HitTransform.position.y, m_HitTransform.position.z));

					//and the rotation from the transform of the plane collider
					m_HitTransform.rotation = hit.transform.rotation;
				}
			}
			#else*/

			// this is code responsible for letting you move kitten around on device

			if (Input.touchCount > 0 && m_HitTransform != null) // if there's a touch, & there's an object to be moved...
			{
				var touch = Input.GetTouch(0);

				// when user begins dragging on the screen...
				if (touch.phase == TouchPhase.Began || touch.phase == TouchPhase.Moved)
				{
					var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);

					// guessing an ARPoint represents a point in the real world the computer tracks? and kitten can be placed at an ARPoint?

					ARPoint point = new ARPoint {
						x = screenPosition.x,
						y = screenPosition.y
					};
							
					// ARHitTestResultType is an ARKit (iOS) class (like ARPoint)
					// basically holds information about what the camera's seeing in the real world (surfaces, objects, etc.)
                    // this code prioritize result types
                    ARHitTestResultType[] resultTypes = {
                        ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent, 
                        // if you want to use infinite planes use this:
                        //ARHitTestResultType.ARHitTestResultTypeExistingPlane,
                        ARHitTestResultType.ARHitTestResultTypeHorizontalPlane, 
                        ARHitTestResultType.ARHitTestResultTypeFeaturePoint
                    }; 

                    foreach (ARHitTestResultType resultType in resultTypes)
                    {
                        if (HitTestWithResultType (point, resultType)) // see above for the function being called
                        {
							return; // once kitten has been moved, stop (no more movement)
                        }
                    }
				}
			}
			//#endif
		}

	
	}
}

